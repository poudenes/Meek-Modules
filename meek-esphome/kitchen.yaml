#########################################################
# Below all fixed settings for kitchen PCB
#########################################################
substitutions:
  devicename: meek-kitchen
  friendly: ESPHome kitchen
  motion_sensor: binary_sensor.kitchen_detection
  ip: 192.168.100.206
  touch_power: GPIO16 # (D0)
  neopixel: GPIO02 #(D4)
  gpio_touch1: GPIO14 # (D5)
  gpio_touch2: GPIO12 # (D6)
  gpio_touch3: GPIO13 # (D7)
  gpio_relay1: GPIO05 # (D1)
  gpio_relay2: GPIO4 # (D2)
  gpio_relay3: GPIO15 # (D8)

#########################################################
# Everything below can be copy/paste without problem
#########################################################
esphome:
  name: ${devicename}
  on_boot:
    priority: 600
    then:
      - switch.turn_on: touch_power

esp8266:
  board: esp01_1m
  restore_from_flash: true

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 0s
  fast_connect: true
  manual_ip:
    static_ip: ${ip}
    gateway: 192.168.100.1
    subnet: 255.255.255.0
    dns1: 192.168.100.1
  ap:
    ssid: ${devicename}
    password: !secret password
    channel: 4

api:
  encryption:
    key: !secret api_key
  reboot_timeout: 15min

time:
  - platform: homeassistant
    id: homeassistant_time

preferences:
  flash_write_interval: 1min
  
logger:
  level: DEBUG
  
ota:
  safe_mode: true
  password: !secret password

button:
  - platform: factory_reset
    name: "${friendly} - reset"

sensor:
  - platform: wifi_signal
    name: "${friendly} - wifi Signal"
    update_interval: 5min

  - platform: uptime
    name: "${friendly} - Uptime"
    update_interval: 5min

light:
  - platform: neopixelbus
    default_transition_length: 0s
    type: GRB
    variant: 800KBPS
    pin: ${neopixel}
    num_leds: 3
    name: "${friendly} - Neopixel"
    restore_mode: ALWAYS_ON
    id: neopixel

#########################################################
# Only needed when you use more then 1 neopixel
#########################################################
  - platform: partition
    name: "${friendly} partition - neopixel1"
    restore_mode: ALWAYS_ON
    default_transition_length: 0s
    id: neopixel1
    segments:
      - id: neopixel
        from: 0
        to: 0
  
  - platform: partition
    name: "${friendly} partition - neopixel2"
    restore_mode: ALWAYS_ON
    default_transition_length: 0s
    id: neopixel2
    segments:
      - id: neopixel
        from: 1
        to: 1

  - platform: partition
    name: "${friendly} partition - neopixel3"
    restore_mode: ALWAYS_ON
    default_transition_length: 0s
    id: neopixel3
    segments:
      - id: neopixel
        from: 2
        to: 2
#########################################################

switch:
  - platform: gpio
    pin: ${touch_power}
    name: "${friendly} - Touch 1 power"
    id: touch_power

  - platform: safe_mode
    name: "${friendly} - safe mode"

  - platform: template
    name: "${friendly} - Switch 1"
    restore_state: true
    id: switch1
    optimistic: true

  - platform: template
    name: "${friendly} - switch 2"
    restore_state: yes
    id: switch2
    optimistic: true

  - platform: template
    name: "${friendly} - switch 3"
    restore_state: yes
    id: switch3
    optimistic: true

  - platform: gpio
    pin: ${gpio_relay1}
    name: "${friendly} - relay 1"

  - platform: gpio
    pin: ${gpio_relay2}
    name: "${friendly} - relay 2"

  - platform: gpio
    pin: ${gpio_relay3}
    name: "${friendly} - relay 3"

binary_sensor:
  - platform: gpio
    pin: ${gpio_touch1}
    name: "${friendly} - Touch 1"
    on_press:
      - switch.toggle: switch1
      - if:
          condition:
            switch.is_on: switch1
          then:
            - if:
                condition:
                  lambda: 'return id(goodnight).state == "on";'
                then:
                  - light.turn_on: 
                      id: neopixel
                      brightness: 20%
                      red: 0%
                      green: 100%
                      blue: 0%
                else:
                - light.turn_on: 
                    id: neopixel
                    brightness: 100%
                    red: 0%
                    green: 100%
                    blue: 0%
      - if:
          condition:
            switch.is_off: switch1
          then:
            - if:
                condition:
                  lambda: 'return id(daytime).state == "on";'
                then:
                  - light.turn_on: # RED
                      id: neopixel
                      brightness: 100%
                      red: 100%
                      green: 0%
                      blue: 0%
            - if:
                condition:
                  lambda: 'return id(goodnight).state == "on";'
                then:
                  - light.turn_on: # RED 
                      id: neopixel
                      brightness: 20%
                      red: 100%
                      green: 0%
                      blue: 100%
            - if:
                condition:
                  lambda: 'return id(kodi).state == "on";'
                then:
                  - light.turn_on: # PINK
                      id: neopixel
                      brightness: 100%
                      red: 100%
                      green: 0%
                      blue: 100%
            - if:
                condition:
                  lambda: 'return id(evening).state == "on";'
                then:
                  - light.turn_on: # RED
                      id: neopixel
                      brightness: 100%
                      red: 100%
                      green: 0%
                      blue: 0%
            - if:
                condition:
                  lambda: 'return id(appletv).state == "on";'
                then:
                  - light.turn_on: # YELLOW
                      id: neopixel
                      brightness: 100%
                      red: 100%
                      green: 100%
                      blue: 0%
            - if:
                condition:
                  lambda: 'return id(tv).state == "on";'
                then:
                  - light.turn_on: # LIGHT BLUE
                      id: neopixel
                      brightness: 100%
                      red: 1%
                      green: 46%
                      blue: 99%
            - if:
                condition:
                  lambda: 'return id(nintendo).state == "on";'
                then:
                  - light.turn_on: # PURPLE
                      id: neopixel
                      brightness: 100%
                      red: 57%
                      green: 17%
                      blue: 93%

  - platform: gpio
    pin: ${gpio_touch2}
    name: "${friendly} - touch 2"
    on_press:
      - switch.toggle: switch2
      - if:
          condition:
            switch.is_on: switch2
          then:
            - light.turn_on: 
                id: neopixel2
                brightness: 100%
                red: 0%
                green: 100%
                blue: 0%
      - if:
          condition:
            switch.is_off: switch2
          then:
            - if:
                condition:
                  lambda: 'return id(daytime).state == "on";'
                then:
                  - light.turn_on: # RED
                      id: neopixel2
                      brightness: 100%
                      red: 100%
                      green: 0%
                      blue: 0%
            - if:
                condition:
                  lambda: 'return id(goodnight).state == "on";'
                then:
                  - light.turn_on: # RED 
                      id: neopixel2
                      brightness: 100%
                      red: 10%
                      green: 0%
                      blue: 10%
            - if:
                condition:
                  lambda: 'return id(kodi).state == "on";'
                then:
                  - light.turn_on: # PINK
                      id: neopixel2
                      brightness: 100%
                      red: 100%
                      green: 0%
                      blue: 100%
            - if:
                condition:
                  lambda: 'return id(evening).state == "on";'
                then:
                  - light.turn_on: # RED
                      id: neopixel2
                      brightness: 100%
                      red: 100%
                      green: 0%
                      blue: 0%
            - if:
                condition:
                  lambda: 'return id(appletv).state == "on";'
                then:
                  - light.turn_on: # YELLOW
                      id: neopixel2
                      brightness: 100%
                      red: 100%
                      green: 100%
                      blue: 0%
            - if:
                condition:
                  lambda: 'return id(tv).state == "on";'
                then:
                  - light.turn_on: # LIGHT BLUE
                      id: neopixel2
                      brightness: 100%
                      red: 1%
                      green: 46%
                      blue: 99%
            - if:
                condition:
                  lambda: 'return id(nintendo).state == "on";'
                then:
                  - light.turn_on: # PURPLE
                      id: neopixel2
                      brightness: 100%
                      red: 57%
                      green: 17%
                      blue: 93%

  - platform: gpio
    pin: ${gpio_touch3}
    name: "${friendly} - touch 3"
    on_press:
      - switch.toggle: switch3
      - if:
          condition:
            switch.is_on: switch3
          then:
            - light.turn_on: 
                id: neopixel3
                brightness: 100%
                red: 0%
                green: 100%
                blue: 0%
      - if:
          condition:
            switch.is_off: switch3
          then:
            - if:
                condition:
                  lambda: 'return id(daytime).state == "on";'
                then:
                  - light.turn_on: # RED
                      id: neopixel3
                      brightness: 100%
                      red: 100%
                      green: 0%
                      blue: 0%
            - if:
                condition:
                  lambda: 'return id(goodnight).state == "on";'
                then:
                  - light.turn_on: # RED 
                      id: neopixel3
                      brightness: 100%
                      red: 10%
                      green: 0%
                      blue: 10%
            - if:
                condition:
                  lambda: 'return id(kodi).state == "on";'
                then:
                  - light.turn_on: # PINK
                      id: neopixel3
                      brightness: 100%
                      red: 100%
                      green: 0%
                      blue: 100%
            - if:
                condition:
                  lambda: 'return id(evening).state == "on";'
                then:
                  - light.turn_on: # RED
                      id: neopixel3
                      brightness: 100%
                      red: 100%
                      green: 0%
                      blue: 0%
            - if:
                condition:
                  lambda: 'return id(appletv).state == "on";'
                then:
                  - light.turn_on: # YELLOW
                      id: neopixel3
                      brightness: 100%
                      red: 100%
                      green: 100%
                      blue: 0%
            - if:
                condition:
                  lambda: 'return id(tv).state == "on";'
                then:
                  - light.turn_on: # LIGHT BLUE
                      id: neopixel3
                      brightness: 100%
                      red: 1%
                      green: 46%
                      blue: 99%
            - if:
                condition:
                  lambda: 'return id(nintendo).state == "on";'
                then:
                  - light.turn_on: # PURPLE
                      id: neopixel3
                      brightness: 100%
                      red: 57%
                      green: 17%
                      blue: 93%

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${friendly} - ip"
    ssid:
      name: "${friendly} - ssid"
    bssid:
      name: "${friendly} - bssid"
    mac_address:
      name: "${friendly} - mac"

  - platform: version
    name: "${friendly} - Version"
    hide_timestamp: true
  
  - platform: homeassistant
    name: "Daytime"
    entity_id: switch.scene_daytime
    id: "daytime"
    on_value:
      - if:
          condition:
            lambda: 'return id(daytime).state == "on";'
          then:
            - light.turn_on: # RED
                id: neopixel
                brightness: 100%
                red: 100%
                green: 0%
                blue: 0%

  - platform: homeassistant
    name: "Evening"
    entity_id: switch.scene_evening
    id: "evening"
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(evening).state == "on";'
            then:
              - light.turn_on: # RED
                  id: neopixel
                  brightness: 100%
                  red: 100%
                  green: 0%
                  blue: 0%

  - platform: homeassistant
    name: "TV"
    entity_id: switch.scene_tv
    id: "tv"
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(tv).state == "on";'
            then:
              - light.turn_on: # LIGHT BLUE
                  id: neopixel
                  brightness: 100%
                  red: 1%
                  green: 46%
                  blue: 99%

  - platform: homeassistant
    name: "AppleTV"
    entity_id: switch.scene_appletv
    id: "appletv"
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(appletv).state == "on";'
            then:
              - light.turn_on: # YELLOW
                  id: neopixel
                  brightness: 100%
                  red: 100%
                  green: 100%
                  blue: 0%

  - platform: homeassistant
    name: "Kodi"
    entity_id: switch.scene_kodi
    id: "kodi"
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(kodi).state == "on";'
            then:
              - light.turn_on: # PINK
                  id: neopixel
                  brightness: 100%
                  red: 100%
                  green: 0%
                  blue: 100%

  - platform: homeassistant
    name: "Nintendo"
    entity_id: switch.scene_nintendo
    id: "nintendo"
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(nintendo).state == "on";'
            then:
              - light.turn_on: # PURPLE
                  id: neopixel
                  brightness: 100%
                  red: 57%
                  green: 17%
                  blue: 93%

  - platform: homeassistant
    name: "Goodnight"
    entity_id: switch.scene_goodnight
    id: "goodnight"
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(goodnight).state == "on";'
            then:
              - light.turn_on: # RED
                  id: neopixel
                  brightness: 20%
                  red: 100%
                  green: 0%
                  blue: 0%


#########################################################
# Specific settings for bathtoom.
# All modules have their specific settings below here.
#########################################################
  - platform: homeassistant
    name: "Motion"
    entity_id: ${motion_sensor}
    id: "motion"
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(motion).state == "on";'
            then:
              - if:
                  condition:
                    lambda: 'return id(goodnight).state == "on";'
                  then:
                    - light.turn_on: # BLUE
                        id: neopixel
                        brightness: 20%
                        red: 0%
                        green: 0%
                        blue: 100%
                  else:
                  - light.turn_on: # BLUE
                      id: neopixel
                      brightness: 100%
                      red: 0%
                      green: 0%
                      blue: 100%
        - if:
            condition:
              lambda: 'return id(motion).state == "off";'
            then:
              - if:
                  condition:
                    lambda: 'return id(daytime).state == "on";'
                  then:
                    - light.turn_on: # RED
                        id: neopixel
                        brightness: 100%
                        red: 100%
                        green: 0%
                        blue: 0%
              - if:
                  condition:
                    lambda: 'return id(goodnight).state == "on";'
                  then:
                    - light.turn_on: # RED 
                        id: neopixel
                        brightness: 20%
                        red: 100%
                        green: 0%
                        blue: 100%
              - if:
                  condition:
                    lambda: 'return id(kodi).state == "on";'
                  then:
                    - light.turn_on: # PINK
                        id: neopixel
                        brightness: 100%
                        red: 100%
                        green: 0%
                        blue: 100%
              - if:
                  condition:
                    lambda: 'return id(evening).state == "on";'
                  then:
                    - light.turn_on: # RED
                        id: neopixel
                        brightness: 100%
                        red: 100%
                        green: 0%
                        blue: 0%
              - if:
                  condition:
                    lambda: 'return id(appletv).state == "on";'
                  then:
                    - light.turn_on: # YELLOW
                        id: neopixel
                        brightness: 100%
                        red: 100%
                        green: 100%
                        blue: 0%
              - if:
                  condition:
                    lambda: 'return id(tv).state == "on";'
                  then:
                    - light.turn_on: # LIGHT BLUE
                        id: neopixel
                        brightness: 100%
                        red: 1%
                        green: 46%
                        blue: 99%
              - if:
                  condition:
                    lambda: 'return id(nintendo).state == "on";'
                  then:
                    - light.turn_on: # PURPLE
                        id: neopixel
                        brightness: 100%
                        red: 57%
                        green: 17%
                        blue: 93%
